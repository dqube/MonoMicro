<#@ template debug="true" hostSpecific="true" #>
<#@ assembly name="Microsoft.EntityFrameworkCore" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Design" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Relational" #>
<#@ assembly name="Microsoft.Extensions.DependencyInjection.Abstractions" #>
<#@ assembly name="Humanizer" #>
<#@ parameter name="EntityType" type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" #>
<#@ parameter name="Options" type="Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions" #>
<#@ parameter name="NamespaceHint" type="System.String" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.EntityFrameworkCore" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.Extensions.DependencyInjection" #>
<#@ import namespace="Humanizer" #>

<#
   // Template version: 703 - please do NOT remove this line
   ///if(!System.Diagnostics.Debugger.IsAttached) System.Diagnostics.Debugger.Launch();
    var services = (IServiceProvider)Host;
    var annotationCodeGenerator = services.GetRequiredService<IAnnotationCodeGenerator>();
    var code = services.GetRequiredService<ICSharpHelper>();
    var entityNameLower=EntityType.Name.ToString().ToLower();
    var RootNamespace=Options.ModelNamespace.ToString().Remove((Options.ModelNamespace.Length)-8,8);
    var entityNamespace=RootNamespace +"Persistence.Repository";
    var usings = new List<string>
    {
        "System",
        "System.Collections.Generic",
        "Microsoft.AspNetCore.Http",
        "Microsoft.AspNetCore.Mvc",
        RootNamespace + "Domain.Repository",
        RootNamespace + "Models"
    };

   

    if (!string.IsNullOrEmpty(NamespaceHint))
    {
#>
namespace <#= entityNamespace #>;

<#
    }   
    var firstProperty=EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1).FirstOrDefault();
#>
[ApiController]
[Route("[controller]")]
internal class <#= EntityType.Name #>sController : Controller
{
    private const string Policy = "<#= entityNameLower #>";
    private readonly IDispatcher _dispatcher;

    public <#= EntityType.Name #>sController(IDispatcher dispatcher)
    {
        _dispatcher = dispatcher;
    }
     [HttpGet]
    [ProducesResponseType(StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status401Unauthorized)]
    [ProducesResponseType(StatusCodes.Status403Forbidden)]
    public async Task<ActionResult<Paged<<#= EntityType.Name #>DetailsDto>>> BrowseAsync([FromQuery] Browse<#= EntityType.Name #>s query)
        => Ok(await _dispatcher.QueryAsync(query));

    [HttpGet("{<#= entityNameLower #>Id:int}")]
    [ProducesResponseType(StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [ProducesResponseType(StatusCodes.Status401Unauthorized)]
    [ProducesResponseType(StatusCodes.Status403Forbidden)]
    public async Task<ActionResult<<#= EntityType.Name #>DetailsDto>> GetAsync(int <#= entityNameLower #>Id)
    {
        // <#= EntityType.Name #> cannot access the other <#= entityNameLower #> accounts
        var <#= entityNameLower #> = await _dispatcher.QueryAsync(new Get<#= EntityType.Name #> { <#= EntityType.Name #>Id = <#= entityNameLower #>Id });
        if (<#= entityNameLower #> is not null)
        {
            return Ok(<#= entityNameLower #>);
        }

        return NotFound();
    }
        
    [HttpPost]
    [ProducesResponseType(StatusCodes.Status204NoContent)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    public async Task<ActionResult> Post(Add<#= EntityType.Name #> command)
    {
        await _dispatcher.SendAsync(command);
        return NoContent();
    }

    [HttpPut("update")]
    [ProducesResponseType(StatusCodes.Status204NoContent)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [ProducesResponseType(StatusCodes.Status401Unauthorized)]
    public async Task<ActionResult> Post(Update<#= EntityType.Name #> command)
    {
        await _dispatcher.SendAsync(command);
        return NoContent();
    }   


}

<#
    var previousOutput = GenerationEnvironment;
    GenerationEnvironment = new StringBuilder();

    foreach (var ns in usings.Distinct().OrderBy(x => x, new NamespaceComparer()))
    {
#>
using <#= ns #>;
<#
    }

    WriteLine("");

    GenerationEnvironment.Append(previousOutput);
#>
