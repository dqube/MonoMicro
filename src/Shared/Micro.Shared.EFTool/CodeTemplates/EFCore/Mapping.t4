<#@ template debug="true" hostSpecific="true" #>
<#@ assembly name="Microsoft.EntityFrameworkCore" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Design" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Relational" #>
<#@ assembly name="Microsoft.Extensions.DependencyInjection.Abstractions" #>
<#@ assembly name="Humanizer" #>
<#@ parameter name="EntityType" type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" #>
<#@ parameter name="Options" type="Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions" #>
<#@ parameter name="NamespaceHint" type="System.String" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.EntityFrameworkCore" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.Extensions.DependencyInjection" #>
<#@ import namespace="Humanizer" #>

<#
   // Template version: 703 - please do NOT remove this line
   ///if(!System.Diagnostics.Debugger.IsAttached) System.Diagnostics.Debugger.Launch();
    var services = (IServiceProvider)Host;
    var annotationCodeGenerator = services.GetRequiredService<IAnnotationCodeGenerator>();
    var code = services.GetRequiredService<ICSharpHelper>();
    var entityNameLower=EntityType.Name.ToString().ToLower();
    var RootNamespace=Options.ModelNamespace.ToString().Remove((Options.ModelNamespace.Length)-8,8);
    var entityNamespace=RootNamespace +"Persistence.Repository";
    var usings = new List<string>
    {
        "System",
        "System.Collections.Generic",
        "FluentValidation",
        RootNamespace + "Domain.Repository",
        RootNamespace + "Models"
    };

   

    if (!string.IsNullOrEmpty(NamespaceHint))
    {
#>
namespace <#= entityNamespace #>;

<#
    }   
    var firstProperty=EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1).FirstOrDefault();
#>
/// Create
internal static class <#= EntityType.Name #>sExtensions
{
    public static <#= EntityType.Name #>Dto AsDto(this <#= EntityType.Name #> <#= entityNameLower #>)
        => <#= entityNameLower #>.Map<<#= EntityType.Name #>Dto>();

    public static <#= EntityType.Name #>DetailsDto AsDetailsDto(this <#= EntityType.Name #> <#= entityNameLower #>)
    {
        var dto = <#= entityNameLower #>.Map<<#= EntityType.Name #>DetailsDto>();     

        return dto;
    }

    private static T Map<T>(this <#= EntityType.Name #> <#= entityNameLower #>) where T : <#= EntityType.Name #>Dto, new()
        => new()
        {
<# 
   foreach (var property in EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
    {
    string lastprop = string.Empty;
    var cPropertyNameLower= property.Name.ToString().Camelize();
    if (property == EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1).Last())
        {
        lastprop=string.Empty;
        }
        else
        {
        lastprop=",";
        }
   #>
   <#= property.Name #> =<#= entityNameLower #>.<#= property.Name #><#= lastprop #> 
<#
    }
#>
 };

}

<#
    var previousOutput = GenerationEnvironment;
    GenerationEnvironment = new StringBuilder();

    foreach (var ns in usings.Distinct().OrderBy(x => x, new NamespaceComparer()))
    {
#>
using <#= ns #>;
<#
    }

    WriteLine("");

    GenerationEnvironment.Append(previousOutput);
#>
