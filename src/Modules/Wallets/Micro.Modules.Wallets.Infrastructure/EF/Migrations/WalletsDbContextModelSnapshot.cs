// <auto-generated />
using System;
using Micro.Modules.Wallets.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Micro.Modules.Wallets.Infrastructure.EF.Migrations
{
    [DbContext(typeof(WalletsDbContext))]
    partial class WalletsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("wallets")
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Micro.Modules.Wallets.Domain.Owners.Entities.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Owners", "wallets");

                    b.HasDiscriminator<string>("Type").HasValue("Owner");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Micro.Modules.Wallets.Domain.Wallets.Entities.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Transfers", "wallets");

                    b.HasDiscriminator<string>("Type").HasValue("Transfer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Micro.Modules.Wallets.Domain.Wallets.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DomainEventVersion")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId", "Currency")
                        .IsUnique();

                    b.ToTable("Wallets", "wallets");
                });

            modelBuilder.Entity("Micro.Modules.Wallets.Domain.Owners.Entities.CorporateOwner", b =>
                {
                    b.HasBaseType("Micro.Modules.Wallets.Domain.Owners.Entities.Owner");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("CorporateOwner");
                });

            modelBuilder.Entity("Micro.Modules.Wallets.Domain.Owners.Entities.IndividualOwner", b =>
                {
                    b.HasBaseType("Micro.Modules.Wallets.Domain.Owners.Entities.Owner");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("IndividualOwner");
                });

            modelBuilder.Entity("Micro.Modules.Wallets.Domain.Wallets.Entities.IncomingTransfer", b =>
                {
                    b.HasBaseType("Micro.Modules.Wallets.Domain.Wallets.Entities.Transfer");

                    b.HasDiscriminator().HasValue("IncomingTransfer");
                });

            modelBuilder.Entity("Micro.Modules.Wallets.Domain.Wallets.Entities.OutgoingTransfer", b =>
                {
                    b.HasBaseType("Micro.Modules.Wallets.Domain.Wallets.Entities.Transfer");

                    b.HasDiscriminator().HasValue("OutgoingTransfer");
                });

            modelBuilder.Entity("Micro.Modules.Wallets.Domain.Wallets.Entities.Transfer", b =>
                {
                    b.HasOne("Micro.Modules.Wallets.Domain.Wallets.Entities.Wallet", null)
                        .WithMany("Transfers")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Micro.Modules.Wallets.Domain.Wallets.Entities.Wallet", b =>
                {
                    b.HasOne("Micro.Modules.Wallets.Domain.Owners.Entities.Owner", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Micro.Modules.Wallets.Domain.Wallets.Entities.Wallet", b =>
                {
                    b.Navigation("Transfers");
                });
#pragma warning restore 612, 618
        }
    }
}
